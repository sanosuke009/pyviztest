{"uid":"7e035652e27d3f4f","name":"test_selenium_nonmatchingsnapshot","fullName":"test_selenium#test_selenium_nonmatchingsnapshot","historyId":"65ff62dddb8e08fb684b0c9c10734cc0","time":{"start":1681407773797,"stop":1681407775122,"duration":1325},"status":"broken","statusMessage":"selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Please fill out Username and Password.\nMessage: unexpected alert open: {Alert text : Please fill out Username and Password.}\n  (Session info: headless chrome=112.0.5615.49)\nStacktrace:\n0   chromedriver                        0x000000010dafcae8 chromedriver + 4958952\n1   chromedriver                        0x000000010daf47b3 chromedriver + 4925363\n2   chromedriver                        0x000000010d6b61d6 chromedriver + 475606\n3   chromedriver                        0x000000010d73b099 chromedriver + 1020057\n4   chromedriver                        0x000000010d71f9e3 chromedriver + 907747\n5   chromedriver                        0x000000010d6e9aef chromedriver + 686831\n6   chromedriver                        0x000000010d6eb00e chromedriver + 692238\n7   chromedriver                        0x000000010dab89ad chromedriver + 4680109\n8   chromedriver                        0x000000010dabdc12 chromedriver + 4701202\n9   chromedriver                        0x000000010dac479f chromedriver + 4728735\n10  chromedriver                        0x000000010dabeb7a chromedriver + 4705146\n11  chromedriver                        0x000000010da9127e chromedriver + 4518526\n12  chromedriver                        0x000000010dade908 chromedriver + 4835592\n13  chromedriver                        0x000000010dadea87 chromedriver + 4835975\n14  chromedriver                        0x000000010daee00f chromedriver + 4898831\n15  libsystem_pthread.dylib             0x00007ff8053f04e1 _pthread_start + 125\n16  libsystem_pthread.dylib             0x00007ff8053ebf6b thread_start + 15","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"21f80ddc056c7fa1b2c1cee10501f066\")>\n\n    def test_selenium_nonmatchingsnapshot(browser) -> None:\n        vm = VisualTest(snapshot_path=visualtestresults, driverpage=browser, updatesnapshot=updatesnapshot,\n                        savefailuresnapondisk=savefailuresnapondisk, allurereport=allurereport)\n        vm.setpaths()\n        headerelement = browser.find_element(By.XPATH, xpath_header_productstore)\n        wait = WebDriverWait(browser, int(explicitwait)/1000)\n        wait.until(EC.visibility_of_element_located((By.XPATH, xpath_header_productstore)))\n        assert page_title in browser.current_url\n        assert headerelement.is_displayed()\n        loginlink = browser.find_element(By.XPATH, xpath_link_login)\n        loginlink.click()\n        loginheader = browser.find_element(By.XPATH, xpath_header_login)\n        wait.until(EC.visibility_of_element_located((By.XPATH, xpath_header_login)))\n        usernamefield = browser.find_element(By.ID, id_input_username)\n        passwordfield = browser.find_element(By.ID, id_input_password)\n        loginbutton = browser.find_element(By.XPATH, xpath_button_login)\n        #gallery = page.locator(\"xpath=\"+xpath_div_movinggallery)\n        usernamefield.send_keys(username)\n        passwordfield.send_keys(password)\n        loginbutton.click()\n>       wait.until(EC.visibility_of_element_located((By.XPATH, xpath_link_logout)))\n\ncom/tests/unittest/test_selenium.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:86: in until\n    value = method(self._driver)\n../../../hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/expected_conditions.py:139: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n../../../hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:831: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../../hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x109e3b040>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Please fill out Username and Password.\"},\"error\":\"unexpected alert...ff8053f04e1 _pthread_start + 125\\\\n16  libsystem_pthread.dylib             0x00007ff8053ebf6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Please fill out Username and Password.\nE           Message: unexpected alert open: {Alert text : Please fill out Username and Password.}\nE             (Session info: headless chrome=112.0.5615.49)\nE           Stacktrace:\nE           0   chromedriver                        0x000000010dafcae8 chromedriver + 4958952\nE           1   chromedriver                        0x000000010daf47b3 chromedriver + 4925363\nE           2   chromedriver                        0x000000010d6b61d6 chromedriver + 475606\nE           3   chromedriver                        0x000000010d73b099 chromedriver + 1020057\nE           4   chromedriver                        0x000000010d71f9e3 chromedriver + 907747\nE           5   chromedriver                        0x000000010d6e9aef chromedriver + 686831\nE           6   chromedriver                        0x000000010d6eb00e chromedriver + 692238\nE           7   chromedriver                        0x000000010dab89ad chromedriver + 4680109\nE           8   chromedriver                        0x000000010dabdc12 chromedriver + 4701202\nE           9   chromedriver                        0x000000010dac479f chromedriver + 4728735\nE           10  chromedriver                        0x000000010dabeb7a chromedriver + 4705146\nE           11  chromedriver                        0x000000010da9127e chromedriver + 4518526\nE           12  chromedriver                        0x000000010dade908 chromedriver + 4835592\nE           13  chromedriver                        0x000000010dadea87 chromedriver + 4835975\nE           14  chromedriver                        0x000000010daee00f chromedriver + 4898831\nE           15  libsystem_pthread.dylib             0x00007ff8053f04e1 _pthread_start + 125\nE           16  libsystem_pthread.dylib             0x00007ff8053ebf6b thread_start + 15\n\n../../../hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:244: UnexpectedAlertPresentException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1681407752827,"stop":1681407752828,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"base_url","time":{"start":1681407752827,"stop":1681407752827,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"_verify_url","time":{"start":1681407752827,"stop":1681407752827,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"delete_output_dir","time":{"start":1681407752828,"stop":1681407752828,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser","time":{"start":1681407753568,"stop":1681407758601,"duration":5033},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser","time":{"start":1681407771645,"stop":1681407773796,"duration":2151},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"browser::0","time":{"start":1681407775177,"stop":1681407775266,"duration":89},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser::0","time":{"start":1681407785960,"stop":1681407785997,"duration":37},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"suite","value":"test_selenium"},{"name":"host","value":"Mac-1681407618983.local"},{"name":"thread","value":"2004-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_selenium"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"7e035652e27d3f4f.json","parameterValues":[]}